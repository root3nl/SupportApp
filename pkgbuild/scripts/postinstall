#!/bin/zsh --no-rcs

# Install Support App LaunchAgent
#
#
# Copyright 2024 Root3 B.V. All rights reserved.
#
# This script will create the Support App LaunchAgent and reload it when needed.
#
# THE SOFTWARE IS PROVIDED BY ROOT3 B.V. "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
# EVENT SHALL ROOT3 B.V. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
# IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# ------------------    edit the variables below this line    ------------------

# LaunchAgent label
launch_agent="nl.root3.support"

# LaunchDaemon label
launch_daemon="nl.root3.support.helper"

# Install location
install_location="/Applications/Support.app"

# Get the username of the currently logged in user
username=$(scutil <<< "show State:/Users/ConsoleUser" | awk '/Name :/ && ! /loginwindow/ { print $3 }')

# Remove "Downloaded from Internet" warning
# xattr -d -r com.apple.quarantine "${install_location}"

# Load Requirements
autoload is-at-least

# macOS Version
os_version=$(sw_vers -productVersion)

# ------------------    Gatekeeper scan    ------------------

# Perform a Gatekeeper scan. This is useful for pre-warming the cache so users 
# do not see the 'Verifying...' dialog on first launch of an application.
if is-at-least 14.0 ${os_version}; then
	gktool scan "${install_location}"
fi

# ------------------    LaunchAgent    ------------------

# Open the app so the legacy LaunchAgent properly displays the app name and icon
# in System Settings > General > Login Items
# Tested and does only work when a user is logged in during the installation
# Thanks to @PicoMitchell:
# https://github.com/freegeek-pdx/macOS-Testing-and-Deployment-Scripts/blob/main/fgMIB%20Resources/Prepare%20OS%20Package/fg-prepare-os.sh#L971-L983
if is-at-least 13.0 ${os_version}; then
	OSASCRIPT_ENV_APP_PATH="/Applications/Support.app" osascript -l 'JavaScript' -e 'ObjC.import("LaunchServices"); $.LSRegisterURL($.NSURL.fileURLWithPath($.NSProcessInfo.processInfo.environment.objectForKey("OSASCRIPT_ENV_APP_PATH")), true)' &> /dev/null
	
	if [[ -n "${username}" ]]; then
		# Get the username ID
		uid=$(id -u "${username}")

		launchctl asuser "${uid}" sudo -u "${username}" open -na "${install_location}"
		sleep 5 # need to let it build the app sandbox to avoid permissions pop ups
	fi
fi

# Add AssociatedBundleIdentifiers to show app name in Login Items on 
# macOS 13 and higher instead of developer name
defaults write "/Library/LaunchAgents/${launch_agent}.plist" AssociatedBundleIdentifiers -array -string "nl.root3.support"
# Set the Label and ProgramArguments
defaults write "/Library/LaunchAgents/${launch_agent}.plist" Label -string "${launch_agent}"
defaults write "/Library/LaunchAgents/${launch_agent}.plist" ProgramArguments -array -string "/Applications/Support.app/Contents/MacOS/Support"
# Run every reboot
defaults write "/Library/LaunchAgents/${launch_agent}.plist" KeepAlive -boolean yes
# Set ProcessType to Interactive
defaults write "/Library/LaunchAgents/${launch_agent}.plist" ProcessType -string "Interactive"
# Set permissions
chown root:wheel "/Library/LaunchAgents/${launch_agent}.plist"
chmod 644 "/Library/LaunchAgents/${launch_agent}.plist"

# Reload the LaunchAgent
if [[ -n "${username}" ]]; then

	# Get the username ID
	uid=$(id -u "${username}")

	# Unload the LaunchAgent
	if launchctl print "gui/${uid}/${launch_agent}" &> /dev/null ; then
		launchctl bootout gui/${uid} "/Library/LaunchAgents/${launch_agent}.plist" &> /dev/null
	fi

	# Just to be sure, kill Support App if still running
	if pgrep -x "Support" ; then
		killall -9 "Support"
	fi

	# Load the LaunchAgent
	launchctl bootstrap gui/${uid} "/Library/LaunchAgents/${launch_agent}.plist"
fi

# ------------------    Uninstall SupportHelper    ------------------

# Remove SupportHelper and LaunchDaemon if found
if [[ -f "/usr/local/bin/SupportHelper" ]]; then

	# Remove SupportHelper binary
	rm -f "/usr/local/bin/SupportHelper"

	# Unload the LaunchDaemon
	if launchctl print "system/${launch_daemon}" &> /dev/null ; then
		launchctl bootout "system/${launch_daemon}" &> /dev/null
	fi

	# Remove SupportHelper LaunchDaemon
	if [[ -f "/Library/LaunchDaemons/${launch_daemon}.plist" ]]; then
		rm -f "/Library/LaunchDaemons/${launch_daemon}.plist"
	fi
	
fi

# ------------------    PrivilegedHelperTool    ------------------

# Detect optional preference to opt-out of Privileged Helper Tool activation
privileged_helper_tool_opt_out=$(/usr/bin/osascript -l JavaScript << EOS 2>/dev/null
ObjC.unwrap($.NSUserDefaults.alloc.initWithSuiteName('nl.root3.support').objectForKey('DisablePrivilegedHelperTool'))
EOS
)

# Setup Privileged Helper Tool if not opted out
if [[ "${privileged_helper_tool_opt_out}" != "true" ]]; then
	"${install_location}/Contents/Resources/install_privileged_helper_tool.zsh"
fi
